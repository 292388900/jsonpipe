{"name":"jsonpipe","tagline":"An AJAX client for chunked JSON responses","body":"jsonpipe is a lightweight AJAX client for chunked JSON responses. The API is similar to [jQuery ajax](http://api.jquery.com/jquery.ajax/), but for JSON reposnses trasmitted through [chunked encoding](http://en.wikipedia.org/wiki/Chunked_transfer_encoding). It is a standalone utility with no dependencies. \r\n\r\n##Prerequisites\r\nTo use jsonpipe, the server should \r\n\r\n1. Emit the [Transfer-Encoding: chunked](http://en.wikipedia.org/wiki/Chunked_transfer_encoding) HTTP header\r\n2. Every valid JSON object should be separated by the delimiter `\\n\\n` (double new line character, it is also configurable). Instead of processing the JSON on every chunk, jsonpipe waits for the delimiter and then processes. The server should always ensure there is a valid JSON object between the delimiter. The reasoning behind this is, even when a chunk has an invalid JSON (which is very likely), the JSON processing would not break and wait for the next delimiter. A sample JSON response shown below \r\n```JSON\r\n    {\r\n        \"id\": 12345,\r\n        \"title\": \"Bruce Wayne\",\r\n        \"price\": \"$199.99\"\r\n    }\r\n    \\n\\n\r\n    {\r\n        \"id\": 67890,\r\n        \"title\": \"Bane\",\r\n        \"price\": \"$299.99\"\r\n    }\r\n```\r\n\r\n##Usage\r\n[jsonpipe.js](https://github.com/eBay/jsonpipe/blob/master/jsonpipe.js) is bundled as a [browserify CommonJS](http://dontkry.com/posts/code/browserify-and-the-universal-module-definition.html) module, so it can be used in the same node.js `require` style. It has only one API named `flow` exposed \r\n```JavaScript\r\n    var jsonpipe = require('jsonpipe');\r\n\t/**\r\n     * @param {String} url A string containing the URL to which the request is sent.\r\n     * @param {Object} url A set of key/value pairs that configure the Ajax request.\r\n     * @return {XMLHttpRequest} The XMLHttpRequest object for this request.\r\n     * @method flow\r\n     */\r\n    jsonpipe.flow('http://api.com/items?q=batman', {\r\n    \t\"delimiter\": \"\", // String. The delimiter separating valid JSON objects; default is \"\\n\\n\"\r\n        \"success\": function(data) {\r\n            // Do something with this JSON chunk\r\n        },\r\n        \"error\": function(errorMsg) {\r\n            // Something wrong happened, check the error message\r\n        },\r\n        \"complete\": function(statusText) {\r\n            // Called after success/error, with the XHR status text\r\n        },\r\n        \"timeout\": 3000, // Number. Set a timeout (in milliseconds) for the request\r\n        \"method\": \"GET\", // String. The type of request to make (e.g. \"POST\", \"GET\", \"PUT\"); default is \"GET\"\r\n        \"headers\": { // Object. An object of additional header key/value pairs to send along with request\r\n            \"X-Requested-With\": \"XMLHttpRequest\"\r\n        },\r\n        \"data\": \"\" // String. A serialized string to be sent in a POST/PUT request\r\n    });\r\n```\r\n\r\n###options\r\n####delimiter\r\nType: `String`\r\n\r\nThe delimiter separating valid JSON objects in the chunked response; default is `\\n\\n`\r\n\r\n####success\r\nType: `Function`\r\n\r\nThe callback function to be called on every valid JSON chunk. The function gets passed the parsed JSON object. \r\n\r\n####error\r\nType: `Function`\r\n\r\nThe callback function to be called on error scenarios. The function gets passed with an error message, reasoning the failure. There can be many reasons for errors, the most common one being the JSON parse error. It that case the error message would be `parsererror`. For errors associated with the HTTP request the message would be `XMLHttpRequest` object's  `statusText`. \r\n\r\n####complete\r\nType: `Function`\r\n\r\nThe callback function to be called when the request finishes (after success and error callbacks are executed). The function gets passed the `XMLHttpRequest` object's  `statusText`.\r\n\r\n####timeout\r\nType: `Number`\r\n\r\nTimeout in milliseconds for the HTTP request. If a call exceeds the timeout, the call is aborted and error function is called.\r\n\r\n####method\r\nType: `String`\r\n\r\nThe HTTP method/type of request to make (e.g. `POST`, `DELETE`, `PUT`); default is `GET`.\r\n\r\n####headers\r\nType: `Object`\r\n\r\nAn object of additional header key/value pairs to send along with request.\r\n\r\n####data\r\nType: `String`\r\n\r\nA serialized string to be sent in the request body for a POST/PUT request\r\n\r\n##Testing\r\nThe entire test suite for the jsonpipe API is available in the main test file  [jsonpipe.js](https://github.com/eBay/jsonpipe/blob/master/test/jsonpipe.js). The [mocha-phantomjs](https://github.com/metaskills/mocha-phantomjs) wrapper is used as the testing framework and [chai](http://chaijs.com/api/assert/) for assertion. To run the tests - clone/fork the [repo](https://github.com/eBay/jsonpipe), \r\ninstall the package `$ npm install` and run\r\n\r\n    $ npm test\r\n\r\n##Issues\r\nHave a bug or a feature request? [Please open a new issue](https://github.com/eBay/jsonpipe/issues)\r\n\r\n##Author(s)\r\n[Senthil Padmanabhan](http://senthilp.com/)\r\n\r\n##License \r\nCopyright (c) 2015 eBay Inc.\r\n\r\nReleased under the MIT License\r\nhttp://www.opensource.org/licenses/MIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}